{
  "version": 3,
  "sources": ["../../tailwindcss-intersect/dist/index.esm.js"],
  "sourcesContent": ["// node_modules/tailwindcss/dist/plugin.mjs\r\nfunction u(n, i) {\r\n  return { handler: n, config: i };\r\n}\r\nu.withOptions = function(n, i = () => ({})) {\r\n  function t(o) {\r\n    return { handler: n(o), config: i(o) };\r\n  }\r\n  return t.__isOptionsFunction = true, t;\r\n};\r\nvar g = u;\r\n\r\n// src/plugin/index.js\r\nvar plugin_default = g(\r\n  ({ addVariant }) => {\r\n    addVariant(\"intersect\", \"&:not([no-intersect])\");\r\n  }\r\n);\r\n\r\n// src/observer/index.js\r\nvar Observer = {\r\n  start() {\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", () => this.observe());\r\n      return;\r\n    }\r\n    this.observe();\r\n  },\r\n  observe() {\r\n    const selectors = [\r\n      '[class*=\" intersect:\"]',\r\n      '[class*=\":intersect:\"]',\r\n      '[class^=\"intersect:\"]',\r\n      '[class=\"intersect\"]',\r\n      '[class*=\" intersect \"]',\r\n      '[class^=\"intersect \"]',\r\n      '[class$=\" intersect\"]'\r\n    ];\r\n    document.querySelectorAll(selectors.join(\",\")).forEach((element) => {\r\n      const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach((entry) => {\r\n          if (!entry.isIntersecting) {\r\n            element.setAttribute(\"no-intersect\", \"\");\r\n            return;\r\n          }\r\n          element.removeAttribute(\"no-intersect\");\r\n          element.classList.contains(\"intersect-once\") && observer.disconnect();\r\n        });\r\n      }, {\r\n        threshold: this.getThreshold(element)\r\n      });\r\n      observer.observe(element);\r\n    });\r\n  },\r\n  getThreshold(element) {\r\n    if (element.classList.contains(\"intersect-full\")) {\r\n      return 0.99;\r\n    }\r\n    if (element.classList.contains(\"intersect-half\")) {\r\n      return 0.5;\r\n    }\r\n    return 0;\r\n  }\r\n};\r\nvar observer_default = Observer;\r\n\r\n// src/index.js\r\nvar index_default = plugin_default;\r\nexport {\r\n  observer_default as Observer,\r\n  index_default as default\r\n};\r\n"],
  "mappings": ";;;AACA,SAAS,EAAE,GAAG,GAAG;AACf,SAAO,EAAE,SAAS,GAAG,QAAQ,EAAE;AACjC;AACA,EAAE,cAAc,SAAS,GAAG,IAAI,OAAO,CAAC,IAAI;AAC1C,WAAS,EAAE,GAAG;AACZ,WAAO,EAAE,SAAS,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE;AAAA,EACvC;AACA,SAAO,EAAE,sBAAsB,MAAM;AACvC;AACA,IAAI,IAAI;AAGR,IAAI,iBAAiB;AAAA,EACnB,CAAC,EAAE,WAAW,MAAM;AAClB,eAAW,aAAa,uBAAuB;AAAA,EACjD;AACF;AAGA,IAAI,WAAW;AAAA,EACb,QAAQ;AACN,QAAI,SAAS,eAAe,WAAW;AACrC,eAAS,iBAAiB,oBAAoB,MAAM,KAAK,QAAQ,CAAC;AAClE;AAAA,IACF;AACA,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,UAAU;AACR,UAAM,YAAY;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,aAAS,iBAAiB,UAAU,KAAK,GAAG,CAAC,EAAE,QAAQ,CAAC,YAAY;AAClE,YAAM,WAAW,IAAI,qBAAqB,CAAC,YAAY;AACrD,gBAAQ,QAAQ,CAAC,UAAU;AACzB,cAAI,CAAC,MAAM,gBAAgB;AACzB,oBAAQ,aAAa,gBAAgB,EAAE;AACvC;AAAA,UACF;AACA,kBAAQ,gBAAgB,cAAc;AACtC,kBAAQ,UAAU,SAAS,gBAAgB,KAAK,SAAS,WAAW;AAAA,QACtE,CAAC;AAAA,MACH,GAAG;AAAA,QACD,WAAW,KAAK,aAAa,OAAO;AAAA,MACtC,CAAC;AACD,eAAS,QAAQ,OAAO;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA,EACA,aAAa,SAAS;AACpB,QAAI,QAAQ,UAAU,SAAS,gBAAgB,GAAG;AAChD,aAAO;AAAA,IACT;AACA,QAAI,QAAQ,UAAU,SAAS,gBAAgB,GAAG;AAChD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AACA,IAAI,mBAAmB;AAGvB,IAAI,gBAAgB;",
  "names": []
}
